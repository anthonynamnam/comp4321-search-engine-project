/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.5
 * Generated at: 2021-05-01 14:58:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import mypackage.*;
import java.util.*;

public final class search_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_packages.add("mypackage");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, shrink-to-fit=no\">\r\n");
      out.write("    <title>Search Result</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"./assets/bootstrap/css/bootstrap.min.css\">\r\n");
      out.write("    <link rel=\"stylesheet\"\r\n");
      out.write("        href=\"https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800\">\r\n");
      out.write("    <link rel=\"stylesheet\"\r\n");
      out.write("        href=\"https://fonts.googleapis.com/css?family=Merriweather:400,300,300italic,400italic,700,700italic,900,900italic\">\r\n");
      out.write("    <link rel=\"stylesheet\"\r\n");
      out.write("        href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\r\n");
      out.write("    <link rel=\"stylesheet\"\r\n");
      out.write("        href=\"https://cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.1.0/magnific-popup.min.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"./assets/css/home.css\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body id=\"page-top\"\r\n");
      out.write("    style=\"background-image: url('./assets/img/bg0.jpg');background-attachment: fixed;background-size: cover;\">\r\n");
      out.write("    <!------------ Navigation Bar ------------>\r\n");
      out.write("    <nav class=\"navbar navbar-light navbar-expand-lg fixed-top\" id=\"mainNav\">\r\n");
      out.write("        <div class=\"container\"><a class=\"navbar-brand js-scroll-trigger\" href='./index.html'>.txtr</a>\r\n");
      out.write("            <div class=\"col\">\r\n");
      out.write("                <form method=\"post\" action=\"./search.jsp\">\r\n");
      out.write("                    <div class=\"input-group\">\r\n");
      out.write("                        <div class=\"input-group-prepend\"></div><input class=\"form-control searchInputBox\"\r\n");
      out.write("                            type=\"text\" placeholder=\"Enter search\"\r\n");
      out.write("                            value='");
      out.print(request.getParameter("userInput"));
      out.write("' name=\"userInput\" autofocus />\r\n");
      out.write("                        <div class=\"input-group-append\"><button class=\"btn btn-primary searchBtn\"\r\n");
      out.write("                                type=\"submit\" style=\"border-radius: 0;\"><i\r\n");
      out.write("                                    class=\"fa fa-search\"></i></button></div>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n");
      out.write("            <ul class=\"navbar-nav ml-auto\">\r\n");
      out.write("                <li class=\"nav-item\"></li>\r\n");
      out.write("                <li class=\"nav-item\"></li>\r\n");
      out.write("                <li class=\"nav-item\"></li>\r\n");
      out.write("                <li class=\"nav-item\"></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </nav>\r\n");
      out.write("    <!------------ Display Result ------------>\r\n");
      out.write("    <div>\r\n");
      out.write("      ");

        StopStem stopstem = new StopStem("stopwords-en.txt"); // Put this file under bin/ folder since it is the working folder at the moment.
        if(request.getParameter("userInput")!=null) {
        	String query = request.getParameter("userInput");
			out.println("<div> Your input: "+ query + "</div>");
			out.println("<div> Stem: " + stopstem.stem(query)  + "</div>");
		} else {
			out.println("You input nothing.");
		}                

        String path = "../webapps/example/db/doc";
        DbHandler handler = new DbHandler(path);
        // You will see a newly created rocksdb called database under bin/ folder.
        out.println("<div>" + handler.sayHi() + " Successfully use database handler." + "</div>");
        
        // remember to close database
        // out.println("<div>" + handler.getAllDocID() + "</div>");
        handler.close();
        
      
      out.write("</div>\r\n");
      out.write("    \r\n");
      out.write("        <header class=\" text-white d-flex\"\r\n");
      out.write("            style=\"/*background-image: url('./assets/img/header.jpg');*/height: 100vh;\">\r\n");
      out.write("            <div class=\"container p-0\">\r\n");
      out.write("                <div class=\"col-lg mx-auto resultList\">\r\n");
      out.write("                    <div class=\"row\">\r\n");
      out.write("                        <div class=\"col\">\r\n");
      out.write("                            <div class=\"card resultCard\">\r\n");
      out.write("                                <div class=\"card-body\">\r\n");
      out.write("                                    <h4 class=\"card-title\">\r\n");
      out.write("                                      Hello\r\n");
      out.write("                                    </h4>\r\n");
      out.write("                                    <h6 class=\"text-muted card-subtitle mb-2\">Subtitle</h6>\r\n");
      out.write("                                    <p class=\"card-text\">Search text goes here</p><a class=\"card-link\"\r\n");
      out.write("                                        href=\"#\">Link</a><a class=\"card-link\" href=\"#\">Link</a>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </header>\r\n");
      out.write("        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("        <script\r\n");
      out.write("            src=\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.6.0/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("        <script\r\n");
      out.write("            src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.4.1/jquery.easing.min.js\"></script>\r\n");
      out.write("        <script\r\n");
      out.write("            src=\"https://cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.1.0/jquery.magnific-popup.min.js\"></script>\r\n");
      out.write("        <script src=\"./assets/js/creative.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
